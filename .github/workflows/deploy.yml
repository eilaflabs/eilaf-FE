# ---------------- Developed by M Adnan Ajmal - Next.js CD ---------------- #
# This workflow is a Continuous Integration/Continuous Deployment (CI/CD) pipeline for deploying a Next.js application
# to a self-hosted Ubuntu server.
#
# 1. The workflow uses environment variables to set the application name, component name, and release path.
#    Ensure that these are set correctly according to your application's configuration.
#
# 2. The workflow runs on a push to the main branch and can be manually triggered with inputs to specify the target environment.
#
# 3. You need to set up the following secrets and variables in your repository environment:
#    3.1. [Env]_SERVER: The IP address or domain name of the remote server you are deploying to.
#    3.2. [Env]_USER: The username you use to SSH into the remote server.
#    3.3. [Env]_KEY: The SSH private key you use to authenticate with the remote server.
#    3.4. [Env]_NGINX: The contents of your NGINX configuration file.
#    3.5. APP_NAME: The name of the project without spaces.
#    3.6. COMPONENT_NAME: The name of the application component (e.g., frontend, backend).

name: 'Next.js CD'

env:
  APP_NAME: ${{ vars.APP_NAME }}
  COMPONENT_NAME: ${{ vars.COMPONENT_NAME }}
  RELEASE_PATH: /root/${{ vars.APP_NAME }}/${{ github.event_name == 'push' && 'dev' || github.event.inputs.environment }}/${{ vars.COMPONENT_NAME }}
  NODE_ENV: ${{ github.event_name == 'push' && 'dev' || github.event.inputs.environment }}

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, prod)'
        type: choice
        options:
          - dev
          - prod
        required: true

jobs:
  deploy:
    runs-on: self-hosted  # Specify that the job runs on a self-hosted runner

    steps:
      # Step 1: Checkout the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Setup Node.js with version 18.
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # Step 3: Install dependencies and build the Next.js project.
      - name: Install deps and build project
        run: |
          yarn install
          CI= yarn run build

      # Step 4: Transfer the built files to the remote server.
      - name: Transfer files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets[format('{0}_SERVER', env.NODE_ENV)] }}
          username: ${{ secrets[format('{0}_USER', env.NODE_ENV)] }}
          key: ${{ secrets[format('{0}_KEY', env.NODE_ENV)] }}
          rm: true
          source: ".next,public,package.json,yarn.lock"
          target: ${{ env.RELEASE_PATH }}

      # Step 5: Deploy the application and restart services.
      - name: Deploy and restart services
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[format('{0}_SERVER', env.NODE_ENV)] }}
          username: ${{ secrets[format('{0}_USER', env.NODE_ENV)] }}
          key: ${{ secrets[format('{0}_KEY', env.NODE_ENV)] }}
          script: |
            set -e  # Exit immediately if a command exits with a non-zero status.

            # Change to the release directory
            cd ${{ env.RELEASE_PATH }}

            # Install production dependencies
            yarn install --production

            # Copy the Nginx configuration directly from the repository environment variable
            echo '${{ secrets[format('{0}_NGINX', env.NODE_ENV)] }}' > ${{ env.RELEASE_PATH }}/.next/nginx.conf || exit 1

            # Check Nginx configuration syntax
            sudo nginx -t || exit 1
            
            # Restart Nginx service
            sudo systemctl restart nginx || exit 1

            # Show the list of all PM2 processes
            pm2 list

            # Restart the PM2 application
            pm2 restart ${{ env.APP_NAME }}-${{ env.COMPONENT_NAME }} || pm2 start yarn --name "${{ env.APP_NAME }}-${{ env.COMPONENT_NAME }}" -- start
