# ---------------- Developed by - MERN TL ---------------- #
# This workflow is a Continuous Integration/Continuous Deployment (CI/CD) pipeline for deploying a React.js frontend application
# to a remote ubuntu server.
#
# Here are some comments to make it easier for everyone to use:
#
# 1. The workflow uses environment variables to set the application name, component name, and release path.
#    Ensure that these are set correctly according to your application's configuration.
#
# 2. The workflow runs on a push to the main branch and can be manually triggered with inputs to specify the target environment.
#
# 3. It's important to note that this workflow uses repository environment and several secrets and variables that need to be set up
#    in order for it to work properly. You will need to create the following secrets in your repository environment:
#
#    3.1. [Env]_SERVER: the IP address or domain name of the remote server you are deploying to.
#    3.2. [Env]_USER: the username you use to SSH into the remote server (root user is recommended).
#    3.3. [Env]_KEY: the SSH private key you use to authenticate with the remote server.
#    3.4. [Env]_NGINX: the contents of your NGINX configuration file. This should be a multi-line string with each line
#         separated by a newline character.
#
# In addition, you will need to set up the following variables in your repository environment:
#
#    3.5. APP_NAME: the name of the project without spaces.
#    3.6. COMPONENT_NAME: the name of the app component e.g: frontend, admin, backend.
#
# Overall, this workflow provides a good starting point for deploying a React.js frontend application to a remote server using GitHub Actions.
# However, it should be customized according to your application's specific requirements.

name: "CD"

env:
  APP_NAME: ${{ vars.APP_NAME }}
  COMPONENT_NAME: ${{ vars.COMPONENT_NAME }}
  RELEASE_PATH: /root/${{ vars.APP_NAME }}/${{ github.event_name == 'push' && 'dev' || github.event.inputs.environment }}/${{ vars.COMPONENT_NAME }}
  NODE_ENV: ${{ github.event_name == 'push' && 'dev' || github.event.inputs.environment }}

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (dev)"
        type: choice
        options:
          - dev
        required: true

jobs:
  deploy:
    runs-on: self-hosted
    if: ${{ contains('["haazaa", "Zunairaali482"]', github.actor) || github.event_name == 'push' || github.event.inputs.environment == 'dev' }}

    steps:
      # The first step checks out the code from the repository.
      - name: Checkout code
        uses: actions/checkout@v2

      # The second step sets up Node.js with version 16.
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      # The third step installs the dependencies and creates a build.
      - name: Install deps and build project
        run: |
          yarn install
          CI= yarn run build

      # The fourth step transfers the code to the remote server using the Secure Copy (SCP) protocol.
      # The source directory is set to 'build', which excludes the other directories from being transferred.
      # Ensure that this is set correctly according to your application's file structure.
      - name: Transfer files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets[format('{0}_SERVER', env.NODE_ENV)] }}
          username: ${{ secrets[format('{0}_USER', env.NODE_ENV)] }}
          key: ${{ secrets[format('{0}_KEY', env.NODE_ENV)] }}
          rm: true
          source: "build"
          target: ${{ env.RELEASE_PATH }}/build

      # The fifth step copies the NGINX configuration file to the remote server.
      # The NGINX configuration file is used to proxy requests to the application.
      # Ensure that this is set correctly according to your application and server's configuration.
      - name: Copy config files
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[format('{0}_SERVER', env.NODE_ENV)] }}
          username: ${{ secrets[format('{0}_USER', env.NODE_ENV)] }}
          key: ${{ secrets[format('{0}_KEY', env.NODE_ENV)] }}
          script: |
            mv ${{ env.RELEASE_PATH }}/build/build/* ${{ env.RELEASE_PATH }}/build/
            rm -rf ${{ env.RELEASE_PATH }}/build/build
            echo '${{ secrets[format('{0}_NGINX', env.NODE_ENV)] }}' > ${{ env.RELEASE_PATH }}/build/nginx.conf
            sudo systemctl restart nginx
